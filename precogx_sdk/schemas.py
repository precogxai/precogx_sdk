from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field
import datetime
import uuid

# Assuming these match the backend schemas defined in precogx_product/app/core/telemetry/schemas.py

class Prompt(BaseModel):
    text: Optional[str] = None
    image: Optional[str] = None # e.g., base64 encoded or URL
    audio: Optional[str] = None # e.g., base64 encoded or URL
    metadata: Dict[str, Any] = Field(default_factory=dict)

class Response(BaseModel):
    text: Optional[str] = None
    image: Optional[str] = None # e.g., base64 encoded or URL
    audio: Optional[str] = None # e.g., base64 encoded or URL
    metadata: Dict[str, Any] = Field(default_factory=dict)

class ToolCall(BaseModel):
    tool_name: str = Field(..., description="The name of the tool used")
    parameters: Dict[str, Any] = Field(..., description="The parameters passed to the tool")
    result: Optional[str] = Field(None, description="The result or output from the tool execution")

class InteractionEvent(BaseModel):
    """Schema for agent interaction events."""
    agent_id: str = Field(..., description="Unique identifier for the agent")
    prompt: str = Field(..., description="The original prompt received by the agent")
    response: str = Field(..., description="The final response generated by the agent")
    tool_calls: Optional[List[ToolCall]] = Field([], description="List of tool calls made during the interaction")
    metadata: Optional[Dict[str, Any]] = Field({}, description="Optional metadata about the interaction")
    chain_of_thought: Optional[str] = Field(None, description="Optional chain of thought reasoning")
    risk_score: Optional[float] = Field(None, description="Risk score calculated by the backend")
    detection_flags: Optional[List[str]] = Field(None, description="Detection flags raised by the backend")

# Need to add import for uuid
import uuid 